# (c) 2017 DataNexus Inc.  All Rights Reserved.
---
# first, check to make sure that the external_subnet is defined; if it is not,
# then it's an error
- name: Ensure that external_subnet is defined
  fail:
    msg: "The external_subnet parameter must be defined"
  run_once: true
  when: external_subnet is undefined
# next, determine the list of roles used in a deployment for this application;
# start by selecting the node map entries for this application
- set_fact:
    node_map_entries: "{{node_map | selectattr('application', 'equalto', application) | list}}"
# then build a unique list of roles from those entries
- set_fact:
    roles_list: "{{node_map_entries | map(attribute='role') | reject('undefined') | unique | list}}"
# the result should be the same length as the number of entries; if it's not,
# then some of the entries had no defined role (so a default value of 'none'
# should be added to the `roles_list` we just constructed, above)
- set_fact:
    application_roles: "{{((roles_list | length) == (node_map_entries | length)) | ternary(roles_list, roles_list + ['none'])}}"

# set the list of nodes for this application
- set_fact:
    application_nodes: "{{(os_inventory_json | json_query('[\"meta-Application_' + application + '\"]')).0}}"

# and build a list of the instances that match the input roles from the
# matching `node_map` entries
- set_fact:
    role_nodes: "{{(role_nodes | default([])) + (os_inventory_json | json_query('[\"meta-Role_' + item + '\"]')).0}}"
  with_items: "{{application_roles}}"
# now that we've built our lists of matching nodes, check to see if we have
# any instances that match all of our input tags; we also set a few facts here
# that are used when launching instances (below) if no matching nodes are found
- set_fact:
    matching_instances: "{{cloud_nodes | intersect(tenant_nodes) | intersect(project_nodes) | intersect(dataflow_nodes) | intersect(domain_nodes) | intersect(application_nodes) | intersect(cluster_nodes) | intersect(role_nodes)}}"

- set_fact:
    matching_instances_found: "{{not (matching_instances | length) == 0}}"
    root_volume_default: "{{(data_volume is defined) | ternary(11, 40)}}"
    multi_interface: "{{internal_subnet is defined and external_subnet != internal_subnet}}"
- set_fact:
    internal_subnet: "{{external_subnet}}"
  when: internal_subnet is undefined
# if we didn't find any matching instances, then launch a set of VMs that are
# tagged with the input tags
- include_tasks: launch-vms.yml
  when: not matching_instances_found
